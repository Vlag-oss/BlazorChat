@page "/settings"
@using BlazorChat.Client.ViewModels
@using System.Security.Claims
@inject ISettingsViewModel SettingsViewModel
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h2 class="white-text"><b>Settings</b></h2> 
<hr class="white-horizontal-line"/>

<div class="col-12">
    <div class="row">
        <RadzenSwitch @bind-value="@SettingsViewModel.Notifications" Style="margin-bottom: 20px;" Change="UpdateNotifications"/>
        <label class="white-text col-3"> Notification </label>
    </div>
    <div class="row">
        <RadzenSwitch @bind-value="@SettingsViewModel.DarkTheme" Style="margin-bottom: 20px;" Change="UpdateTheme"/>
        <label class="white-text col-3"> Dark Theme </label>
    </div>
</div>

@code{

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    [CascadingParameter]
    public Error Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationState;
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
                SettingsViewModel.UserId = Convert.ToInt64(claim?.Value);
                await SettingsViewModel.GetProfile();
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

    private async Task UpdateNotifications()
    {
        await SettingsViewModel.UpdateNotifications();
    }

    private async Task UpdateTheme()
    {
        try
        {
            var themeName = SettingsViewModel.DarkTheme ? "dark" : "light";

            var module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/site.js");
            await module.InvokeVoidAsync("setTheme", themeName);

            await SettingsViewModel.UpdateTheme();
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }

}