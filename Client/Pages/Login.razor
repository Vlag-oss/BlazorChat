@page "/"
@using BlazorChat.Client.ViewModels
@inject ILoginViewModel LoginViewModel
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject IToastService ToastService

<h2 class="white-text"><b>Login</b></h2>
<hr class="white-horizontal-line">
    
<div class="col-6">
    <input type="text" @bind-value="LoginViewModel.EmailAddress" class="form-control dark-theme-textbox" placeholder="email address">
</div>
<br/>
<div class="col-6">
    <input type="password" @bind="LoginViewModel.Password" class="form-control dark-theme-textbox" placeholder="password">
</div>
<br/>

<div class="col-xl-6 col-md-8 col-12 row">
    <div class="col-xl-2 col-lg-2 col-md-6 col-sm-3 col-3">
        <button class="btn btn-primary" @onclick="AuthenticationJWT">Login</button>
    </div>
    <div class="col-xl-5 col-lg-5 col-md-6 col-sm-9 col-9">
        <a class="btn-link" @onclick="CreateAccount">Create an account</a>
    </div>
</div>
<br/>

<div class="col-6">
    <a class="btn btn-block btn-social btn-google" @onclick="GoogleSignIn">
        <i class="fa fa-google"></i> <b>Sign in with Google</b>
    </a>
</div>

@code{
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if(user.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/profile", true);
    }

    public async Task LoginUser()
    {
        await LoginViewModel.LoginUser();
        NavigationManager.NavigateTo("/profile", true);
    }

    public async Task AuthenticationJWT()
    {
        var authenticationResponse = await LoginViewModel.AuthenticationJWT();
        if (authenticationResponse.Token != string.Empty)
        {
            await LocalStorageService.SetItemAsync("jwt_token", authenticationResponse.Token);
            NavigationManager.NavigateTo("/profile", true);
        }
        else
        {
            ToastService.ShowError("Invalid username or password");
        }
    }

    private void GoogleSignIn()
    {
        NavigationManager.NavigateTo("user/GoogleSignIn", true);
    }

    private void CreateAccount()
    {
        NavigationManager.NavigateTo("/createaccount", true);
    }
}