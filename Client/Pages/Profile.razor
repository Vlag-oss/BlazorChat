@page "/profile"
@using BlazorChat.Client.ViewModels
@using System.Security.Claims
@inject IProfileViewModel ProfileViewModel
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>Profile</PageTitle>

<h2 class="white-text"><b>Profile</b></h2>
<hr class="white-horizontal-line"/>

<div class="row">
    
    <div class="col-lg-4 col-md-6 col-sm-8">
        <img src="@ProfileViewModel.ProfilePicDataUrl" class="img-thumbnail" alt="User Profile Picture"/> <br/> <br/>
        <InputFile OnChange="@OnInputFileChanged" class="white-text"></InputFile>
    </div>

    <div class="col-8">
        <input type="text" @bind-value="ProfileViewModel.FirstName" class="form-control dark-theme-textbox" placeholder="first name">
        <br/>
        <input type="text" @bind-value="ProfileViewModel.LastName" class="form-control dark-theme-textbox" placeholder="last name">
        <br/>
        <input type="text" @bind-value="ProfileViewModel.EmailAddress" class="form-control dark-theme-textbox" placeholder="email address">
        <br/>
        <textarea class="form-control dark-theme-textbox" @bind="ProfileViewModel.AboutMe" placeholder="about me" />
        <br/>
        <button class="btn btn-primary" @onclick="ProfileViewModel.UpdateProfile">Update Profile</button>
    </div>
</div>

@code{

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        var file = inputFileChangeEvent.File;

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        ProfileViewModel.ProfilePicDataUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity is {IsAuthenticated: true })
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            ProfileViewModel.UserId = Convert.ToInt64(claim?.Value);
            try
            {
                await ProfileViewModel.GetProfile();
            }
            catch (HttpRequestException ex)
            {
                if (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    await HttpClient.GetAsync("user/logoutuser");
                    NavigationManager.NavigateTo("/", true);
                }
            }
            
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

}